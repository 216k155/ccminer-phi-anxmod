#include "cuda_helper.h"

#define TPB 256

static uint32_t *h_GNonces[MAX_GPUS];
static uint32_t *d_GNonces[MAX_GPUS];

__constant__ uint32_t pTarget[8];

__device__ static uint32_t T0up[] = {
	0xA5F432C6, 0x84976FF8, 0x99B05EEE, 0x8D8C7AF6, 0x0D17E8FF, 0xBDDC0AD6, 0xB1C816DE, 0x54FC6D91, 0x50F09060, 0x03050702, 0xA9E02ECE, 0x7D87D156, 0x192BCCE7, 0x62A613B5, 0xE6317C4D, 0x9AB559EC,
	0x45CF408F, 0x9DBCA31F, 0x40C04989, 0x879268FA, 0x153FD0EF, 0xEB2694B2, 0xC940CE8E, 0x0B1DE6FB, 0xEC2F6E41, 0x67A91AB3, 0xFD1C435F, 0xEA256045, 0xBFDAF923, 0xF7025153, 0x96A145E4, 0x5BED769B,
	0xC25D2875, 0x1C24C5E1, 0xAEE9D43D, 0x6ABEF24C, 0x5AEE826C, 0x41C3BD7E, 0x0206F3F5, 0x4FD15283, 0x5CE48C68, 0xF4075651, 0x345C8DD1, 0x0818E1F9, 0x93AE4CE2, 0x73953EAB, 0x53F59762, 0x3F416B2A,
	0x0C141C08, 0x52F66395, 0x65AFE946, 0x5EE27F9D, 0x28784830, 0xA1F8CF37, 0x0F111B0A, 0xB5C4EB2F, 0x091B150E, 0x365A7E24, 0x9BB6AD1B, 0x3D4798DF, 0x266AA7CD, 0x69BBF54E, 0xCD4C337F, 0x9FBA50EA,
	0x1B2D3F12, 0x9EB9A41D, 0x749CC458, 0x2E724634, 0x2D774136, 0xB2CD11DC, 0xEE299DB4, 0xFB164D5B, 0xF601A5A4, 0x4DD7A176, 0x61A314B7, 0xCE49347D, 0x7B8DDF52, 0x3E429FDD, 0x7193CD5E, 0x97A2B113,
	0xF504A2A6, 0x68B801B9, 0x00000000, 0x2C74B5C1, 0x60A0E040, 0x1F21C2E3, 0xC8433A79, 0xED2C9AB6, 0xBED90DD4, 0x46CA478D, 0xD9701767, 0x4BDDAF72, 0xDE79ED94, 0xD467FF98, 0xE82393B0, 0x4ADE5B85,
	0x6BBD06BB, 0x2A7EBBC5, 0xE5347B4F, 0x163AD7ED, 0xC554D286, 0xD762F89A, 0x55FF9966, 0x94A7B611,	0xCF4AC08A, 0x1030D9E9, 0x060A0E04, 0x819866FE, 0xF00BABA0, 0x44CCB478, 0xBAD5F025, 0xE33E754B,
	0xF30EACA2, 0xFE19445D, 0xC05BDB80, 0x8A858005, 0xADECD33F, 0xBCDFFE21, 0x48D8A870, 0x040CFDF1,	0xDF7A1963, 0xC1582F77, 0x759F30AF, 0x63A5E742, 0x30507020, 0x1A2ECBE5, 0x0E12EFFD, 0x6DB708BF,
	0x4CD45581, 0x143C2418, 0x355F7926, 0x2F71B2C3, 0xE13886BE, 0xA2FDC835, 0xCC4FC788, 0x394B652E,	0x57F96A93, 0xF20D5855, 0x829D61FC, 0x47C9B37A, 0xACEF27C8, 0xE73288BA, 0x2B7D4F32, 0x95A442E6,
	0xA0FB3BC0, 0x98B3AA19, 0xD168F69E, 0x7F8122A3, 0x66AAEE44, 0x7E82D654, 0xABE6DD3B, 0x839E950B,	0xCA45C98C, 0x297BBCC7, 0xD36E056B, 0x3C446C28, 0x798B2CA7, 0xE23D81BC, 0x1D273116, 0x769A37AD,
	0x3B4D96DB, 0x56FA9E64, 0x4ED2A674, 0x1E223614, 0xDB76E492, 0x0A1E120C, 0x6CB4FC48, 0xE4378FB8,	0x5DE7789F, 0x6EB20FBD, 0xEF2A6943, 0xA6F135C4, 0xA8E3DA39, 0xA4F7C631, 0x37598AD3, 0x8B8674F2,
	0x325683D5, 0x43C54E8B, 0x59EB856E, 0xB7C218DA, 0x8C8F8E01, 0x64AC1DB1, 0xD26DF19C, 0xE03B7249,	0xB4C71FD8, 0xFA15B9AC, 0x0709FAF3, 0x256FA0CF, 0xAFEA20CA, 0x8E897DF4, 0xE9206747, 0x18283810,
	0xD5640B6F, 0x888373F0, 0x6FB1FB4A, 0x7296CA5C, 0x246C5438, 0xF1085F57, 0xC7522173, 0x51F36497,	0x2365AECB, 0x7C8425A1, 0x9CBF57E8, 0x21635D3E, 0xDD7CEA96, 0xDC7F1E61, 0x86919C0D, 0x85949B0F,
	0x90AB4BE0, 0x42C6BA7C, 0xC4572671, 0xAAE529CC, 0xD873E390, 0x050F0906, 0x0103F4F7, 0x12362A1C,	0xA3FE3CC2, 0x5FE18B6A, 0xF910BEAE, 0xD06B0269, 0x91A8BF17, 0x58E87199, 0x2769533A, 0xB9D0F727,
	0x384891D9, 0x1335DEEB, 0xB3CEE52B, 0x33557722, 0xBBD604D2, 0x709039A9, 0x89808707, 0xA7F2C133,	0xB6C1EC2D, 0x22665A3C, 0x92ADB815, 0x2060A9C9, 0x49DB5C87, 0xFF1AB0AA, 0x7888D850, 0x7A8E2BA5,
	0x8F8A8903, 0xF8134A59, 0x809B9209, 0x1739231A, 0xDA751065, 0x315384D7, 0xC651D584, 0xB8D303D0,	0xC35EDC82, 0xB0CBE229, 0x7799C35A, 0x11332D1E, 0xCB463D7B, 0xFC1FB7A8, 0xD6610C6D, 0x3A4E622C
};

__device__ static uint32_t T0dn[] = {
	0xC6A597F4, 0xF884EB97, 0xEE99C7B0, 0xF68DF78C, 0xFF0DE517, 0xD6BDB7DC, 0xDEB1A7C8, 0x915439FC, 0x6050C0F0, 0x02030405, 0xCEA987E0, 0x567DAC87, 0xE719D52B, 0xB56271A6, 0x4DE69A31, 0xEC9AC3B5,
	0x8F4505CF, 0x1F9D3EBC, 0x894009C0, 0xFA87EF92, 0xEF15C53F, 0xB2EB7F26, 0x8EC90740, 0xFB0BED1D, 0x41EC822F, 0xB3677DA9, 0x5FFDBE1C, 0x45EA8A25, 0x23BF46DA, 0x53F7A602, 0xE496D3A1, 0x9B5B2DED,
	0x75C2EA5D, 0xE11CD924, 0x3DAE7AE9, 0x4C6A98BE, 0x6C5AD8EE, 0x7E41FCC3, 0xF502F106, 0x834F1DD1, 0x685CD0E4, 0x51F4A207, 0xD134B95C, 0xF908E918, 0xE293DFAE, 0xAB734D95, 0x6253C4F5, 0x2A3F5441,
	0x080C1014, 0x955231F6, 0x46658CAF, 0x9D5E21E2, 0x30286078, 0x37A16EF8, 0x0A0F1411, 0x2FB55EC4, 0x0E091C1B, 0x2436485A, 0x1B9B36B6, 0xDF3DA547, 0xCD26816A, 0x4E699CBB, 0x7FCDFE4C, 0xEA9FCFBA,
	0x121B242D, 0x1D9E3AB9, 0x5874B09C, 0x342E6872, 0x362D6C77, 0xDCB2A3CD, 0xB4EE7329, 0x5BFBB616, 0xA4F65301, 0x764DECD7, 0xB76175A3, 0x7DCEFA49, 0x527BA48D, 0xDD3EA142, 0x5E71BC93, 0x139726A2,
	0xA6F55704, 0xB96869B8, 0x00000000, 0xC12C9974, 0x406080A0, 0xE31FDD21, 0x79C8F243, 0xB6ED772C, 0xD4BEB3D9, 0x8D4601CA, 0x67D9CE70, 0x724BE4DD, 0x94DE3379, 0x98D42B67, 0xB0E87B23, 0x854A11DE,
	0xBB6B6DBD, 0xC52A917E, 0x4FE59E34, 0xED16C13A, 0x86C51754, 0x9AD72F62, 0x6655CCFF, 0x119422A7, 0x8ACF0F4A, 0xE910C930, 0x0406080A, 0xFE81E798, 0xA0F05B0B, 0x7844F0CC, 0x25BA4AD5, 0x4BE3963E,
	0xA2F35F0E, 0x5DFEBA19, 0x80C01B5B, 0x058A0A85, 0x3FAD7EEC, 0x21BC42DF, 0x7048E0D8, 0xF104F90C, 0x63DFC67A, 0x77C1EE58, 0xAF75459F, 0x426384A5, 0x20304050, 0xE51AD12E, 0xFD0EE112, 0xBF6D65B7,
	0x814C19D4, 0x1814303C, 0x26354C5F, 0xC32F9D71, 0xBEE16738, 0x35A26AFD, 0x88CC0B4F, 0x2E395C4B, 0x93573DF9, 0x55F2AA0D, 0xFC82E39D, 0x7A47F4C9, 0xC8AC8BEF, 0xBAE76F32, 0x322B647D, 0xE695D7A4,
	0xC0A09BFB, 0x199832B3, 0x9ED12768, 0xA37F5D81, 0x446688AA, 0x547EA882, 0x3BAB76E6, 0x0B83169E, 0x8CCA0345, 0xC729957B, 0x6BD3D66E, 0x283C5044, 0xA779558B, 0xBCE2633D, 0x161D2C27, 0xAD76419A,
	0xDB3BAD4D, 0x6456C8FA, 0x744EE8D2, 0x141E2822, 0x92DB3F76, 0x0C0A181E, 0x486C90B4, 0xB8E46B37, 0x9F5D25E7, 0xBD6E61B2, 0x43EF862A, 0xC4A693F1, 0x39A872E3, 0x31A462F7, 0xD337BD59, 0xF28BFF86,
	0xD532B156, 0x8B430DC5, 0x6E59DCEB, 0xDAB7AFC2, 0x018C028F, 0xB16479AC, 0x9CD2236D, 0x49E0923B, 0xD8B4ABC7, 0xACFA4315, 0xF307FD09, 0xCF25856F, 0xCAAF8FEA, 0xF48EF389, 0x47E98E20, 0x10182028,
	0x6FD5DE64, 0xF088FB83, 0x4A6F94B1, 0x5C72B896, 0x3824706C, 0x57F1AE08, 0x73C7E652, 0x975135F3, 0xCB238D65, 0xA17C5984, 0xE89CCBBF, 0x3E217C63, 0x96DD377C, 0x61DCC27F, 0x0D861A91, 0x0F851E94,
	0xE090DBAB, 0x7C42F8C6, 0x71C4E257, 0xCCAA83E5, 0x90D83B73, 0x06050C0F, 0xF701F503, 0x1C123836, 0xC2A39FFE, 0x6A5FD4E1, 0xAEF94710, 0x69D0D26B, 0x17912EA8, 0x995829E8, 0x3A277469, 0x27B94ED0,
	0xD938A948, 0xEB13CD35, 0x2BB356CE, 0x22334455, 0xD2BBBFD6, 0xA9704990, 0x07890E80, 0x33A766F2, 0x2DB65AC1, 0x3C227866, 0x15922AAD, 0xC9208960, 0x874915DB, 0xAAFF4F1A, 0x5078A088, 0xA57A518E,
	0x038F068A, 0x59F8B213, 0x0980129B, 0x1A173439, 0x65DACA75, 0xD731B553, 0x84C61351, 0xD0B8BBD3, 0x82C31F5E, 0x29B052CB, 0x5A77B499, 0x1E113C33, 0x7BCBF646, 0xA8FC4B1F, 0x6DD6DA61, 0x2C3A584E
};

__device__ static uint32_t T1up[] = {
	0xF432C6C6, 0x976FF8F8, 0xB05EEEEE, 0x8C7AF6F6, 0x17E8FFFF, 0xDC0AD6D6, 0xC816DEDE, 0xFC6D9191, 0xF0906060, 0x05070202, 0xE02ECECE, 0x87D15656, 0x2BCCE7E7, 0xA613B5B5, 0x317C4D4D, 0xB559ECEC,
	0xCF408F8F, 0xBCA31F1F, 0xC0498989, 0x9268FAFA, 0x3FD0EFEF, 0x2694B2B2, 0x40CE8E8E, 0x1DE6FBFB, 0x2F6E4141, 0xA91AB3B3, 0x1C435F5F, 0x25604545, 0xDAF92323, 0x02515353, 0xA145E4E4, 0xED769B9B,
	0x5D287575, 0x24C5E1E1, 0xE9D43D3D, 0xBEF24C4C, 0xEE826C6C, 0xC3BD7E7E, 0x06F3F5F5, 0xD1528383, 0xE48C6868, 0x07565151, 0x5C8DD1D1, 0x18E1F9F9, 0xAE4CE2E2, 0x953EABAB, 0xF5976262, 0x416B2A2A,
	0x141C0808, 0xF6639595, 0xAFE94646, 0xE27F9D9D, 0x78483030, 0xF8CF3737, 0x111B0A0A, 0xC4EB2F2F, 0x1B150E0E, 0x5A7E2424, 0xB6AD1B1B, 0x4798DFDF, 0x6AA7CDCD, 0xBBF54E4E, 0x4C337F7F, 0xBA50EAEA,
	0x2D3F1212, 0xB9A41D1D, 0x9CC45858, 0x72463434, 0x77413636, 0xCD11DCDC, 0x299DB4B4, 0x164D5B5B, 0x01A5A4A4, 0xD7A17676, 0xA314B7B7, 0x49347D7D, 0x8DDF5252, 0x429FDDDD, 0x93CD5E5E, 0xA2B11313,
	0x04A2A6A6, 0xB801B9B9, 0x00000000, 0x74B5C1C1, 0xA0E04040, 0x21C2E3E3, 0x433A7979, 0x2C9AB6B6, 0xD90DD4D4, 0xCA478D8D, 0x70176767, 0xDDAF7272, 0x79ED9494, 0x67FF9898, 0x2393B0B0, 0xDE5B8585,
	0xBD06BBBB, 0x7EBBC5C5, 0x347B4F4F, 0x3AD7EDED, 0x54D28686, 0x62F89A9A, 0xFF996666, 0xA7B61111, 0x4AC08A8A, 0x30D9E9E9, 0x0A0E0404, 0x9866FEFE, 0x0BABA0A0, 0xCCB47878, 0xD5F02525, 0x3E754B4B,
	0x0EACA2A2, 0x19445D5D, 0x5BDB8080, 0x85800505, 0xECD33F3F, 0xDFFE2121, 0xD8A87070, 0x0CFDF1F1, 0x7A196363, 0x582F7777, 0x9F30AFAF, 0xA5E74242, 0x50702020, 0x2ECBE5E5, 0x12EFFDFD, 0xB708BFBF,
	0xD4558181, 0x3C241818, 0x5F792626, 0x71B2C3C3, 0x3886BEBE, 0xFDC83535, 0x4FC78888, 0x4B652E2E, 0xF96A9393, 0x0D585555, 0x9D61FCFC, 0xC9B37A7A, 0xEF27C8C8, 0x3288BABA, 0x7D4F3232, 0xA442E6E6,
	0xFB3BC0C0, 0xB3AA1919, 0x68F69E9E, 0x8122A3A3, 0xAAEE4444, 0x82D65454, 0xE6DD3B3B, 0x9E950B0B, 0x45C98C8C, 0x7BBCC7C7, 0x6E056B6B, 0x446C2828, 0x8B2CA7A7, 0x3D81BCBC, 0x27311616, 0x9A37ADAD,
	0x4D96DBDB, 0xFA9E6464, 0xD2A67474, 0x22361414, 0x76E49292, 0x1E120C0C, 0xB4FC4848, 0x378FB8B8, 0xE7789F9F, 0xB20FBDBD, 0x2A694343, 0xF135C4C4, 0xE3DA3939, 0xF7C63131, 0x598AD3D3, 0x8674F2F2,
	0x5683D5D5, 0xC54E8B8B, 0xEB856E6E, 0xC218DADA, 0x8F8E0101, 0xAC1DB1B1, 0x6DF19C9C, 0x3B724949, 0xC71FD8D8, 0x15B9ACAC, 0x09FAF3F3, 0x6FA0CFCF, 0xEA20CACA, 0x897DF4F4, 0x20674747, 0x28381010,
	0x640B6F6F, 0x8373F0F0, 0xB1FB4A4A, 0x96CA5C5C, 0x6C543838, 0x085F5757, 0x52217373, 0xF3649797, 0x65AECBCB, 0x8425A1A1, 0xBF57E8E8, 0x635D3E3E, 0x7CEA9696, 0x7F1E6161, 0x919C0D0D, 0x949B0F0F,
	0xAB4BE0E0, 0xC6BA7C7C, 0x57267171, 0xE529CCCC, 0x73E39090, 0x0F090606, 0x03F4F7F7, 0x362A1C1C, 0xFE3CC2C2, 0xE18B6A6A, 0x10BEAEAE, 0x6B026969, 0xA8BF1717, 0xE8719999, 0x69533A3A, 0xD0F72727,
	0x4891D9D9, 0x35DEEBEB, 0xCEE52B2B, 0x55772222, 0xD604D2D2, 0x9039A9A9, 0x80870707, 0xF2C13333, 0xC1EC2D2D, 0x665A3C3C, 0xADB81515, 0x60A9C9C9, 0xDB5C8787, 0x1AB0AAAA, 0x88D85050, 0x8E2BA5A5,
	0x8A890303, 0x134A5959, 0x9B920909, 0x39231A1A, 0x75106565, 0x5384D7D7, 0x51D58484, 0xD303D0D0, 0x5EDC8282, 0xCBE22929, 0x99C35A5A, 0x332D1E1E, 0x463D7B7B, 0x1FB7A8A8, 0x610C6D6D, 0x4E622C2C
};

__device__ static uint32_t T1dn[] = {
	0xA597F4A5, 0x84EB9784, 0x99C7B099, 0x8DF78C8D, 0x0DE5170D, 0xBDB7DCBD, 0xB1A7C8B1, 0x5439FC54, 0x50C0F050, 0x03040503, 0xA987E0A9, 0x7DAC877D, 0x19D52B19, 0x6271A662, 0xE69A31E6, 0x9AC3B59A,
	0x4505CF45, 0x9D3EBC9D, 0x4009C040, 0x87EF9287, 0x15C53F15, 0xEB7F26EB, 0xC90740C9, 0x0BED1D0B, 0xEC822FEC, 0x677DA967, 0xFDBE1CFD, 0xEA8A25EA, 0xBF46DABF, 0xF7A602F7, 0x96D3A196, 0x5B2DED5B,
	0xC2EA5DC2, 0x1CD9241C, 0xAE7AE9AE, 0x6A98BE6A, 0x5AD8EE5A, 0x41FCC341, 0x02F10602, 0x4F1DD14F, 0x5CD0E45C, 0xF4A207F4, 0x34B95C34, 0x08E91808, 0x93DFAE93, 0x734D9573, 0x53C4F553, 0x3F54413F,
	0x0C10140C, 0x5231F652, 0x658CAF65, 0x5E21E25E, 0x28607828, 0xA16EF8A1, 0x0F14110F, 0xB55EC4B5, 0x091C1B09, 0x36485A36, 0x9B36B69B, 0x3DA5473D, 0x26816A26, 0x699CBB69, 0xCDFE4CCD, 0x9FCFBA9F,
	0x1B242D1B, 0x9E3AB99E, 0x74B09C74, 0x2E68722E, 0x2D6C772D, 0xB2A3CDB2, 0xEE7329EE, 0xFBB616FB, 0xF65301F6, 0x4DECD74D, 0x6175A361, 0xCEFA49CE, 0x7BA48D7B, 0x3EA1423E, 0x71BC9371, 0x9726A297,
	0xF55704F5, 0x6869B868, 0x00000000, 0x2C99742C, 0x6080A060, 0x1FDD211F, 0xC8F243C8, 0xED772CED, 0xBEB3D9BE, 0x4601CA46, 0xD9CE70D9, 0x4BE4DD4B, 0xDE3379DE, 0xD42B67D4, 0xE87B23E8, 0x4A11DE4A,
	0x6B6DBD6B, 0x2A917E2A, 0xE59E34E5, 0x16C13A16, 0xC51754C5, 0xD72F62D7, 0x55CCFF55, 0x9422A794, 0xCF0F4ACF, 0x10C93010, 0x06080A06, 0x81E79881, 0xF05B0BF0, 0x44F0CC44, 0xBA4AD5BA, 0xE3963EE3,
	0xF35F0EF3, 0xFEBA19FE, 0xC01B5BC0, 0x8A0A858A, 0xAD7EECAD, 0xBC42DFBC, 0x48E0D848, 0x04F90C04, 0xDFC67ADF, 0xC1EE58C1, 0x75459F75, 0x6384A563, 0x30405030, 0x1AD12E1A, 0x0EE1120E, 0x6D65B76D,
	0x4C19D44C, 0x14303C14, 0x354C5F35, 0x2F9D712F, 0xE16738E1, 0xA26AFDA2, 0xCC0B4FCC, 0x395C4B39, 0x573DF957, 0xF2AA0DF2, 0x82E39D82, 0x47F4C947, 0xAC8BEFAC, 0xE76F32E7, 0x2B647D2B, 0x95D7A495,
	0xA09BFBA0, 0x9832B398, 0xD12768D1, 0x7F5D817F, 0x6688AA66, 0x7EA8827E, 0xAB76E6AB, 0x83169E83, 0xCA0345CA, 0x29957B29, 0xD3D66ED3, 0x3C50443C, 0x79558B79, 0xE2633DE2, 0x1D2C271D, 0x76419A76,
	0x3BAD4D3B, 0x56C8FA56, 0x4EE8D24E, 0x1E28221E, 0xDB3F76DB, 0x0A181E0A, 0x6C90B46C, 0xE46B37E4, 0x5D25E75D, 0x6E61B26E, 0xEF862AEF, 0xA693F1A6, 0xA872E3A8, 0xA462F7A4, 0x37BD5937, 0x8BFF868B,
	0x32B15632, 0x430DC543, 0x59DCEB59, 0xB7AFC2B7, 0x8C028F8C, 0x6479AC64, 0xD2236DD2, 0xE0923BE0, 0xB4ABC7B4, 0xFA4315FA, 0x07FD0907, 0x25856F25, 0xAF8FEAAF, 0x8EF3898E, 0xE98E20E9, 0x18202818,
	0xD5DE64D5, 0x88FB8388, 0x6F94B16F, 0x72B89672, 0x24706C24, 0xF1AE08F1, 0xC7E652C7, 0x5135F351, 0x238D6523, 0x7C59847C, 0x9CCBBF9C, 0x217C6321, 0xDD377CDD, 0xDCC27FDC, 0x861A9186, 0x851E9485,
	0x90DBAB90, 0x42F8C642, 0xC4E257C4, 0xAA83E5AA, 0xD83B73D8, 0x050C0F05, 0x01F50301, 0x12383612, 0xA39FFEA3, 0x5FD4E15F, 0xF94710F9, 0xD0D26BD0, 0x912EA891, 0x5829E858, 0x27746927, 0xB94ED0B9,
	0x38A94838, 0x13CD3513, 0xB356CEB3, 0x33445533, 0xBBBFD6BB, 0x70499070, 0x890E8089, 0xA766F2A7, 0xB65AC1B6, 0x22786622, 0x922AAD92, 0x20896020, 0x4915DB49, 0xFF4F1AFF, 0x78A08878, 0x7A518E7A,
	0x8F068A8F, 0xF8B213F8, 0x80129B80, 0x17343917, 0xDACA75DA, 0x31B55331, 0xC61351C6, 0xB8BBD3B8, 0xC31F5EC3, 0xB052CBB0, 0x77B49977, 0x113C3311, 0xCBF646CB, 0xFC4B1FFC, 0xD6DA61D6, 0x3A584E3A
};

__device__ static uint32_t T2up[] = {
	0x32C6C6A5, 0x6FF8F884, 0x5EEEEE99, 0x7AF6F68D, 0xE8FFFF0D, 0x0AD6D6BD, 0x16DEDEB1, 0x6D919154, 0x90606050, 0x07020203, 0x2ECECEA9, 0xD156567D, 0xCCE7E719, 0x13B5B562, 0x7C4D4DE6, 0x59ECEC9A,
	0x408F8F45, 0xA31F1F9D, 0x49898940, 0x68FAFA87, 0xD0EFEF15, 0x94B2B2EB, 0xCE8E8EC9, 0xE6FBFB0B, 0x6E4141EC, 0x1AB3B367, 0x435F5FFD, 0x604545EA, 0xF92323BF, 0x515353F7, 0x45E4E496, 0x769B9B5B,
	0x287575C2, 0xC5E1E11C, 0xD43D3DAE, 0xF24C4C6A, 0x826C6C5A, 0xBD7E7E41, 0xF3F5F502, 0x5283834F, 0x8C68685C, 0x565151F4, 0x8DD1D134, 0xE1F9F908, 0x4CE2E293, 0x3EABAB73, 0x97626253, 0x6B2A2A3F,
	0x1C08080C, 0x63959552, 0xE9464665, 0x7F9D9D5E, 0x48303028, 0xCF3737A1, 0x1B0A0A0F, 0xEB2F2FB5, 0x150E0E09, 0x7E242436, 0xAD1B1B9B, 0x98DFDF3D, 0xA7CDCD26, 0xF54E4E69, 0x337F7FCD, 0x50EAEA9F,
	0x3F12121B, 0xA41D1D9E, 0xC4585874, 0x4634342E, 0x4136362D, 0x11DCDCB2, 0x9DB4B4EE, 0x4D5B5BFB, 0xA5A4A4F6, 0xA176764D, 0x14B7B761, 0x347D7DCE, 0xDF52527B, 0x9FDDDD3E, 0xCD5E5E71, 0xB1131397,
	0xA2A6A6F5, 0x01B9B968, 0x00000000, 0xB5C1C12C, 0xE0404060, 0xC2E3E31F, 0x3A7979C8, 0x9AB6B6ED, 0x0DD4D4BE, 0x478D8D46, 0x176767D9, 0xAF72724B, 0xED9494DE, 0xFF9898D4, 0x93B0B0E8, 0x5B85854A,
	0x06BBBB6B, 0xBBC5C52A, 0x7B4F4FE5, 0xD7EDED16, 0xD28686C5, 0xF89A9AD7, 0x99666655, 0xB6111194, 0xC08A8ACF, 0xD9E9E910, 0x0E040406, 0x66FEFE81, 0xABA0A0F0, 0xB4787844, 0xF02525BA, 0x754B4BE3,
	0xACA2A2F3, 0x445D5DFE, 0xDB8080C0, 0x8005058A, 0xD33F3FAD, 0xFE2121BC, 0xA8707048, 0xFDF1F104, 0x196363DF, 0x2F7777C1, 0x30AFAF75, 0xE7424263, 0x70202030, 0xCBE5E51A, 0xEFFDFD0E, 0x08BFBF6D,
	0x5581814C, 0x24181814, 0x79262635, 0xB2C3C32F, 0x86BEBEE1, 0xC83535A2, 0xC78888CC, 0x652E2E39, 0x6A939357, 0x585555F2, 0x61FCFC82, 0xB37A7A47, 0x27C8C8AC, 0x88BABAE7, 0x4F32322B, 0x42E6E695,
	0x3BC0C0A0, 0xAA191998, 0xF69E9ED1, 0x22A3A37F, 0xEE444466, 0xD654547E, 0xDD3B3BAB, 0x950B0B83, 0xC98C8CCA, 0xBCC7C729, 0x056B6BD3, 0x6C28283C, 0x2CA7A779, 0x81BCBCE2, 0x3116161D, 0x37ADAD76,
	0x96DBDB3B, 0x9E646456, 0xA674744E, 0x3614141E, 0xE49292DB, 0x120C0C0A, 0xFC48486C, 0x8FB8B8E4, 0x789F9F5D, 0x0FBDBD6E, 0x694343EF, 0x35C4C4A6, 0xDA3939A8, 0xC63131A4, 0x8AD3D337, 0x74F2F28B,
	0x83D5D532, 0x4E8B8B43, 0x856E6E59, 0x18DADAB7, 0x8E01018C, 0x1DB1B164, 0xF19C9CD2, 0x724949E0, 0x1FD8D8B4, 0xB9ACACFA, 0xFAF3F307, 0xA0CFCF25, 0x20CACAAF, 0x7DF4F48E, 0x674747E9, 0x38101018,
	0x0B6F6FD5, 0x73F0F088, 0xFB4A4A6F, 0xCA5C5C72, 0x54383824, 0x5F5757F1, 0x217373C7, 0x64979751, 0xAECBCB23, 0x25A1A17C, 0x57E8E89C, 0x5D3E3E21, 0xEA9696DD, 0x1E6161DC, 0x9C0D0D86, 0x9B0F0F85,
	0x4BE0E090, 0xBA7C7C42, 0x267171C4, 0x29CCCCAA, 0xE39090D8, 0x09060605, 0xF4F7F701, 0x2A1C1C12, 0x3CC2C2A3, 0x8B6A6A5F, 0xBEAEAEF9, 0x026969D0, 0xBF171791, 0x71999958, 0x533A3A27, 0xF72727B9,
	0x91D9D938, 0xDEEBEB13, 0xE52B2BB3, 0x77222233, 0x04D2D2BB, 0x39A9A970, 0x87070789, 0xC13333A7, 0xEC2D2DB6, 0x5A3C3C22, 0xB8151592, 0xA9C9C920, 0x5C878749, 0xB0AAAAFF, 0xD8505078, 0x2BA5A57A,
	0x8903038F, 0x4A5959F8, 0x92090980, 0x231A1A17, 0x106565DA, 0x84D7D731, 0xD58484C6, 0x03D0D0B8, 0xDC8282C3, 0xE22929B0, 0xC35A5A77, 0x2D1E1E11, 0x3D7B7BCB, 0xB7A8A8FC, 0x0C6D6DD6, 0x622C2C3A
};

__device__ static uint32_t T2dn[] = {
	0x97F4A5F4, 0xEB978497, 0xC7B099B0, 0xF78C8D8C, 0xE5170D17, 0xB7DCBDDC, 0xA7C8B1C8, 0x39FC54FC, 0xC0F050F0, 0x04050305, 0x87E0A9E0, 0xAC877D87, 0xD52B192B, 0x71A662A6, 0x9A31E631, 0xC3B59AB5,
	0x05CF45CF, 0x3EBC9DBC, 0x09C040C0, 0xEF928792, 0xC53F153F, 0x7F26EB26, 0x0740C940, 0xED1D0B1D, 0x822FEC2F, 0x7DA967A9, 0xBE1CFD1C, 0x8A25EA25, 0x46DABFDA, 0xA602F702, 0xD3A196A1, 0x2DED5BED,
	0xEA5DC25D, 0xD9241C24, 0x7AE9AEE9, 0x98BE6ABE, 0xD8EE5AEE, 0xFCC341C3, 0xF1060206, 0x1DD14FD1, 0xD0E45CE4, 0xA207F407, 0xB95C345C, 0xE9180818, 0xDFAE93AE, 0x4D957395, 0xC4F553F5, 0x54413F41,
	0x10140C14, 0x31F652F6, 0x8CAF65AF, 0x21E25EE2, 0x60782878, 0x6EF8A1F8, 0x14110F11, 0x5EC4B5C4, 0x1C1B091B, 0x485A365A, 0x36B69BB6, 0xA5473D47, 0x816A266A, 0x9CBB69BB, 0xFE4CCD4C, 0xCFBA9FBA,
	0x242D1B2D, 0x3AB99EB9, 0xB09C749C, 0x68722E72, 0x6C772D77, 0xA3CDB2CD, 0x7329EE29, 0xB616FB16, 0x5301F601, 0xECD74DD7, 0x75A361A3, 0xFA49CE49, 0xA48D7B8D, 0xA1423E42, 0xBC937193, 0x26A297A2,
	0x5704F504, 0x69B868B8, 0x00000000, 0x99742C74, 0x80A060A0, 0xDD211F21, 0xF243C843, 0x772CED2C, 0xB3D9BED9, 0x01CA46CA, 0xCE70D970, 0xE4DD4BDD, 0x3379DE79, 0x2B67D467, 0x7B23E823, 0x11DE4ADE,
	0x6DBD6BBD, 0x917E2A7E, 0x9E34E534, 0xC13A163A, 0x1754C554, 0x2F62D762, 0xCCFF55FF, 0x22A794A7, 0x0F4ACF4A, 0xC9301030, 0x080A060A, 0xE7988198, 0x5B0BF00B, 0xF0CC44CC, 0x4AD5BAD5, 0x963EE33E,
	0x5F0EF30E, 0xBA19FE19, 0x1B5BC05B, 0x0A858A85, 0x7EECADEC, 0x42DFBCDF, 0xE0D848D8, 0xF90C040C, 0xC67ADF7A, 0xEE58C158, 0x459F759F, 0x84A563A5, 0x40503050, 0xD12E1A2E, 0xE1120E12, 0x65B76DB7,
	0x19D44CD4, 0x303C143C, 0x4C5F355F, 0x9D712F71, 0x6738E138, 0x6AFDA2FD, 0x0B4FCC4F, 0x5C4B394B, 0x3DF957F9, 0xAA0DF20D, 0xE39D829D, 0xF4C947C9, 0x8BEFACEF, 0x6F32E732, 0x647D2B7D, 0xD7A495A4,
	0x9BFBA0FB, 0x32B398B3, 0x2768D168, 0x5D817F81, 0x88AA66AA, 0xA8827E82, 0x76E6ABE6, 0x169E839E, 0x0345CA45, 0x957B297B, 0xD66ED36E, 0x50443C44, 0x558B798B, 0x633DE23D, 0x2C271D27, 0x419A769A,
	0xAD4D3B4D, 0xC8FA56FA, 0xE8D24ED2, 0x28221E22, 0x3F76DB76, 0x181E0A1E, 0x90B46CB4, 0x6B37E437, 0x25E75DE7, 0x61B26EB2, 0x862AEF2A, 0x93F1A6F1, 0x72E3A8E3, 0x62F7A4F7, 0xBD593759, 0xFF868B86,
	0xB1563256, 0x0DC543C5, 0xDCEB59EB, 0xAFC2B7C2, 0x028F8C8F, 0x79AC64AC, 0x236DD26D, 0x923BE03B, 0xABC7B4C7, 0x4315FA15, 0xFD090709, 0x856F256F, 0x8FEAAFEA, 0xF3898E89, 0x8E20E920, 0x20281828,
	0xDE64D564, 0xFB838883, 0x94B16FB1, 0xB8967296, 0x706C246C, 0xAE08F108, 0xE652C752, 0x35F351F3, 0x8D652365, 0x59847C84, 0xCBBF9CBF, 0x7C632163, 0x377CDD7C, 0xC27FDC7F, 0x1A918691, 0x1E948594,
	0xDBAB90AB, 0xF8C642C6, 0xE257C457, 0x83E5AAE5, 0x3B73D873, 0x0C0F050F, 0xF5030103, 0x38361236, 0x9FFEA3FE, 0xD4E15FE1, 0x4710F910, 0xD26BD06B, 0x2EA891A8, 0x29E858E8, 0x74692769, 0x4ED0B9D0,
	0xA9483848, 0xCD351335, 0x56CEB3CE, 0x44553355, 0xBFD6BBD6, 0x49907090, 0x0E808980, 0x66F2A7F2, 0x5AC1B6C1, 0x78662266, 0x2AAD92AD, 0x89602060, 0x15DB49DB, 0x4F1AFF1A, 0xA0887888, 0x518E7A8E,
	0x068A8F8A, 0xB213F813, 0x129B809B, 0x34391739, 0xCA75DA75, 0xB5533153, 0x1351C651, 0xBBD3B8D3, 0x1F5EC35E, 0x52CBB0CB, 0xB4997799, 0x3C331133, 0xF646CB46, 0x4B1FFC1F, 0xDA61D661, 0x584E3A4E
};

__device__ static uint32_t T3up[] = {
	0xC6C6A597, 0xF8F884EB, 0xEEEE99C7, 0xF6F68DF7, 0xFFFF0DE5, 0xD6D6BDB7, 0xDEDEB1A7, 0x91915439, 0x606050C0, 0x02020304, 0xCECEA987, 0x56567DAC, 0xE7E719D5, 0xB5B56271, 0x4D4DE69A, 0xECEC9AC3,
	0x8F8F4505, 0x1F1F9D3E, 0x89894009, 0xFAFA87EF, 0xEFEF15C5, 0xB2B2EB7F, 0x8E8EC907, 0xFBFB0BED, 0x4141EC82, 0xB3B3677D, 0x5F5FFDBE, 0x4545EA8A, 0x2323BF46, 0x5353F7A6, 0xE4E496D3, 0x9B9B5B2D,
	0x7575C2EA, 0xE1E11CD9, 0x3D3DAE7A, 0x4C4C6A98, 0x6C6C5AD8, 0x7E7E41FC, 0xF5F502F1, 0x83834F1D, 0x68685CD0, 0x5151F4A2, 0xD1D134B9, 0xF9F908E9, 0xE2E293DF, 0xABAB734D, 0x626253C4, 0x2A2A3F54,
	0x08080C10, 0x95955231, 0x4646658C, 0x9D9D5E21, 0x30302860, 0x3737A16E, 0x0A0A0F14, 0x2F2FB55E, 0x0E0E091C, 0x24243648, 0x1B1B9B36, 0xDFDF3DA5, 0xCDCD2681, 0x4E4E699C, 0x7F7FCDFE, 0xEAEA9FCF,
	0x12121B24, 0x1D1D9E3A, 0x585874B0, 0x34342E68, 0x36362D6C, 0xDCDCB2A3, 0xB4B4EE73, 0x5B5BFBB6, 0xA4A4F653, 0x76764DEC, 0xB7B76175, 0x7D7DCEFA, 0x52527BA4, 0xDDDD3EA1, 0x5E5E71BC, 0x13139726,
	0xA6A6F557, 0xB9B96869, 0x00000000, 0xC1C12C99, 0x40406080, 0xE3E31FDD, 0x7979C8F2, 0xB6B6ED77, 0xD4D4BEB3, 0x8D8D4601, 0x6767D9CE, 0x72724BE4, 0x9494DE33, 0x9898D42B, 0xB0B0E87B, 0x85854A11,
	0xBBBB6B6D, 0xC5C52A91, 0x4F4FE59E, 0xEDED16C1, 0x8686C517, 0x9A9AD72F, 0x666655CC, 0x11119422, 0x8A8ACF0F, 0xE9E910C9, 0x04040608, 0xFEFE81E7, 0xA0A0F05B, 0x787844F0, 0x2525BA4A, 0x4B4BE396,
	0xA2A2F35F, 0x5D5DFEBA, 0x8080C01B, 0x05058A0A, 0x3F3FAD7E, 0x2121BC42, 0x707048E0, 0xF1F104F9, 0x6363DFC6, 0x7777C1EE, 0xAFAF7545, 0x42426384, 0x20203040, 0xE5E51AD1, 0xFDFD0EE1, 0xBFBF6D65,
	0x81814C19, 0x18181430, 0x2626354C, 0xC3C32F9D, 0xBEBEE167, 0x3535A26A, 0x8888CC0B, 0x2E2E395C, 0x9393573D, 0x5555F2AA, 0xFCFC82E3, 0x7A7A47F4, 0xC8C8AC8B, 0xBABAE76F, 0x32322B64, 0xE6E695D7,
	0xC0C0A09B, 0x19199832, 0x9E9ED127, 0xA3A37F5D, 0x44446688, 0x54547EA8, 0x3B3BAB76, 0x0B0B8316, 0x8C8CCA03, 0xC7C72995, 0x6B6BD3D6, 0x28283C50, 0xA7A77955, 0xBCBCE263, 0x16161D2C, 0xADAD7641,
	0xDBDB3BAD, 0x646456C8, 0x74744EE8, 0x14141E28, 0x9292DB3F, 0x0C0C0A18, 0x48486C90, 0xB8B8E46B, 0x9F9F5D25, 0xBDBD6E61, 0x4343EF86, 0xC4C4A693, 0x3939A872, 0x3131A462, 0xD3D337BD, 0xF2F28BFF,
	0xD5D532B1, 0x8B8B430D, 0x6E6E59DC, 0xDADAB7AF, 0x01018C02, 0xB1B16479, 0x9C9CD223, 0x4949E092, 0xD8D8B4AB, 0xACACFA43, 0xF3F307FD, 0xCFCF2585, 0xCACAAF8F, 0xF4F48EF3, 0x4747E98E, 0x10101820,
	0x6F6FD5DE, 0xF0F088FB, 0x4A4A6F94, 0x5C5C72B8, 0x38382470, 0x5757F1AE, 0x7373C7E6, 0x97975135, 0xCBCB238D, 0xA1A17C59, 0xE8E89CCB, 0x3E3E217C, 0x9696DD37, 0x6161DCC2, 0x0D0D861A, 0x0F0F851E,
	0xE0E090DB, 0x7C7C42F8, 0x7171C4E2, 0xCCCCAA83, 0x9090D83B, 0x0606050C, 0xF7F701F5, 0x1C1C1238, 0xC2C2A39F, 0x6A6A5FD4, 0xAEAEF947, 0x6969D0D2, 0x1717912E, 0x99995829, 0x3A3A2774, 0x2727B94E,
	0xD9D938A9, 0xEBEB13CD, 0x2B2BB356, 0x22223344, 0xD2D2BBBF, 0xA9A97049, 0x0707890E, 0x3333A766, 0x2D2DB65A, 0x3C3C2278, 0x1515922A, 0xC9C92089, 0x87874915, 0xAAAAFF4F, 0x505078A0, 0xA5A57A51,
	0x03038F06, 0x5959F8B2, 0x09098012, 0x1A1A1734, 0x6565DACA, 0xD7D731B5, 0x8484C613, 0xD0D0B8BB, 0x8282C31F, 0x2929B052, 0x5A5A77B4, 0x1E1E113C, 0x7B7BCBF6, 0xA8A8FC4B, 0x6D6DD6DA, 0x2C2C3A58
};

__device__ static uint32_t T3dn[] = {
	0xF4A5F432, 0x9784976F, 0xB099B05E, 0x8C8D8C7A, 0x170D17E8, 0xDCBDDC0A, 0xC8B1C816, 0xFC54FC6D, 0xF050F090, 0x05030507, 0xE0A9E02E, 0x877D87D1, 0x2B192BCC, 0xA662A613, 0x31E6317C, 0xB59AB559,
	0xCF45CF40, 0xBC9DBCA3, 0xC040C049, 0x92879268, 0x3F153FD0, 0x26EB2694, 0x40C940CE, 0x1D0B1DE6, 0x2FEC2F6E, 0xA967A91A, 0x1CFD1C43, 0x25EA2560, 0xDABFDAF9, 0x02F70251, 0xA196A145, 0xED5BED76,
	0x5DC25D28, 0x241C24C5, 0xE9AEE9D4, 0xBE6ABEF2, 0xEE5AEE82, 0xC341C3BD, 0x060206F3, 0xD14FD152, 0xE45CE48C, 0x07F40756, 0x5C345C8D, 0x180818E1, 0xAE93AE4C, 0x9573953E, 0xF553F597, 0x413F416B,
	0x140C141C, 0xF652F663, 0xAF65AFE9, 0xE25EE27F, 0x78287848, 0xF8A1F8CF, 0x110F111B, 0xC4B5C4EB, 0x1B091B15, 0x5A365A7E, 0xB69BB6AD, 0x473D4798, 0x6A266AA7, 0xBB69BBF5, 0x4CCD4C33, 0xBA9FBA50,
	0x2D1B2D3F, 0xB99EB9A4, 0x9C749CC4, 0x722E7246, 0x772D7741, 0xCDB2CD11, 0x29EE299D, 0x16FB164D, 0x01F601A5, 0xD74DD7A1, 0xA361A314, 0x49CE4934, 0x8D7B8DDF, 0x423E429F, 0x937193CD, 0xA297A2B1,
	0x04F504A2, 0xB868B801, 0x00000000, 0x742C74B5, 0xA060A0E0, 0x211F21C2, 0x43C8433A, 0x2CED2C9A, 0xD9BED90D, 0xCA46CA47, 0x70D97017, 0xDD4BDDAF, 0x79DE79ED, 0x67D467FF, 0x23E82393, 0xDE4ADE5B,
	0xBD6BBD06, 0x7E2A7EBB, 0x34E5347B, 0x3A163AD7, 0x54C554D2, 0x62D762F8, 0xFF55FF99, 0xA794A7B6, 0x4ACF4AC0, 0x301030D9, 0x0A060A0E, 0x98819866, 0x0BF00BAB, 0xCC44CCB4, 0xD5BAD5F0, 0x3EE33E75,
	0x0EF30EAC, 0x19FE1944, 0x5BC05BDB, 0x858A8580, 0xECADECD3, 0xDFBCDFFE, 0xD848D8A8, 0x0C040CFD, 0x7ADF7A19, 0x58C1582F, 0x9F759F30, 0xA563A5E7, 0x50305070, 0x2E1A2ECB, 0x120E12EF, 0xB76DB708,
	0xD44CD455, 0x3C143C24, 0x5F355F79, 0x712F71B2, 0x38E13886, 0xFDA2FDC8, 0x4FCC4FC7, 0x4B394B65, 0xF957F96A, 0x0DF20D58, 0x9D829D61, 0xC947C9B3, 0xEFACEF27, 0x32E73288, 0x7D2B7D4F, 0xA495A442,
	0xFBA0FB3B, 0xB398B3AA, 0x68D168F6, 0x817F8122, 0xAA66AAEE, 0x827E82D6, 0xE6ABE6DD, 0x9E839E95, 0x45CA45C9, 0x7B297BBC, 0x6ED36E05, 0x443C446C, 0x8B798B2C, 0x3DE23D81, 0x271D2731, 0x9A769A37,
	0x4D3B4D96, 0xFA56FA9E, 0xD24ED2A6, 0x221E2236, 0x76DB76E4, 0x1E0A1E12, 0xB46CB4FC, 0x37E4378F, 0xE75DE778, 0xB26EB20F, 0x2AEF2A69, 0xF1A6F135, 0xE3A8E3DA, 0xF7A4F7C6, 0x5937598A, 0x868B8674,
	0x56325683, 0xC543C54E, 0xEB59EB85, 0xC2B7C218, 0x8F8C8F8E, 0xAC64AC1D, 0x6DD26DF1, 0x3BE03B72, 0xC7B4C71F, 0x15FA15B9, 0x090709FA, 0x6F256FA0, 0xEAAFEA20, 0x898E897D, 0x20E92067, 0x28182838,
	0x64D5640B, 0x83888373, 0xB16FB1FB, 0x967296CA, 0x6C246C54, 0x08F1085F, 0x52C75221, 0xF351F364, 0x652365AE, 0x847C8425, 0xBF9CBF57, 0x6321635D, 0x7CDD7CEA, 0x7FDC7F1E, 0x9186919C, 0x9485949B,
	0xAB90AB4B, 0xC642C6BA, 0x57C45726, 0xE5AAE529, 0x73D873E3, 0x0F050F09, 0x030103F4, 0x3612362A, 0xFEA3FE3C, 0xE15FE18B, 0x10F910BE, 0x6BD06B02, 0xA891A8BF, 0xE858E871, 0x69276953, 0xD0B9D0F7,
	0x48384891, 0x351335DE, 0xCEB3CEE5, 0x55335577, 0xD6BBD604, 0x90709039, 0x80898087, 0xF2A7F2C1, 0xC1B6C1EC, 0x6622665A, 0xAD92ADB8, 0x602060A9, 0xDB49DB5C, 0x1AFF1AB0, 0x887888D8, 0x8E7A8E2B,
	0x8A8F8A89, 0x13F8134A, 0x9B809B92, 0x39173923, 0x75DA7510, 0x53315384, 0x51C651D5, 0xD3B8D303, 0x5EC35EDC, 0xCBB0CBE2, 0x997799C3, 0x3311332D, 0x46CB463D, 0x1FFC1FB7, 0x61D6610C, 0x4E3A4E62
};

#define PC32up(j, r)   ((uint32_t)((j) + (r)))
#define PC32dn(j, r)   0
#define QC32up(j, r)   0xFFFFFFFF
#define QC32dn(j, r)   (((uint32_t)(r) << 24) ^ (~((uint32_t)(j) << 24)))

#define B32_0(x)    __byte_perm(x, 0, 0x4440)	//((x) & 0xFF)
#define B32_1(x)    __byte_perm(x, 0, 0x4441)	//(((x) >> 8) & 0xFF)
#define B32_2(x)    __byte_perm(x, 0, 0x4442)	//(((x) >> 16) & 0xFF)
#define B32_3(x)    __byte_perm(x, 0, 0x4443)	//((x) >> 24)

//#define B32_0(x)    ((x) & 0xFF)
//#define B32_1(x)    bfe(x, 8, 8)//(((x) >> 8) & 0xFF)
//#define B32_2(x)    bfe(x,16, 8)//(((x) >> 16) & 0xFF)
//#define B32_3(x)    bfe(x,24, 8)//((x) >> 24)

#define T0up(x) __ldg(&T0up[x])
#define T0dn(x) mixtabs[1][x]
#define T1up(x) mixtabs[2][x]
#define T1dn(x) mixtabs[3][x]
#define T2up(x) mixtabs[4][x]
#define T2dn(x) __ldg(&T2dn[x])
#define T3up(x) mixtabs[6][x]
#define T3dn(x) __ldg(&T3dn[x])



#define RSTT(d0, d1, a, b0, b1, b2, b3, b4, b5, b6, b7) do { \
	t[d0] = T0up(B32_0(a[b0]))^ T0dn(B32_0(a[b4]));\
	t[d0]^= T1up(B32_1(a[b1]));\
	t[d0]^= T1dn(B32_1(a[b5]));\
	t[d0]^= T2up(B32_2(a[b2]));\
	t[d0]^= T3up(B32_3(a[b3]));\
	t[d0]^= T2dn(B32_2(a[b6]));\
	t[d0]^= T3dn(B32_3(a[b7]));\
	t[d1] = T0dn(B32_0(a[b0])) ^ T1dn(B32_1(a[b1]));\
	t[d1]^= T2dn(B32_2(a[b2]));\
	t[d1]^= T0up(B32_0(a[b4]));\
	t[d1]^= T1up(B32_1(a[b5]));\
	t[d1]^= T2up(B32_2(a[b6]));\
	t[d1]^= T3up(B32_3(a[b7]));\
	t[d1]^= T3dn(B32_3(a[b3]));\
} while (0)

//	t[d0] = T0up(B32_0(a[b0])) ^ xor3x(T1up(B32_1(a[b1])), T2up(B32_2(a[b2])), xor3x(T3up(B32_3(a[b3])), T0dn(B32_0(a[b4])), xor3x(T1dn(B32_1(a[b5])), T2dn(B32_2(a[b6])), T3dn(B32_3(a[b7])))));
//	t[d1] = T0dn(B32_0(a[b0])) ^ xor3x(T1dn(B32_1(a[b1])), T2dn(B32_2(a[b2])), xor3x(T3dn(B32_3(a[b3])), T0up(B32_0(a[b4])), xor3x(T1up(B32_1(a[b5])), T2up(B32_2(a[b6])), T3up(B32_3(a[b7])))));

__device__ __forceinline__
void groestl256_perm_Q(uint32_t thread, uint32_t *a,const uint32_t mixtabs[8][256])
{
	for (int r = 0; r<10; r++)
	{
		uint32_t t[16];

		a[0x0] ^= QC32up(0x00, r);
		a[0x1] ^= QC32dn(0x00, r);
		a[0x2] ^= QC32up(0x10, r);
		a[0x3] ^= QC32dn(0x10, r);
		a[0x4] ^= QC32up(0x20, r);
		a[0x5] ^= QC32dn(0x20, r);
		a[0x6] ^= QC32up(0x30, r);
		a[0x7] ^= QC32dn(0x30, r);
		a[0x8] ^= QC32up(0x40, r);
		a[0x9] ^= QC32dn(0x40, r);
		a[0xA] ^= QC32up(0x50, r);
		a[0xB] ^= QC32dn(0x50, r);
		a[0xC] ^= QC32up(0x60, r);
		a[0xD] ^= QC32dn(0x60, r);
		a[0xE] ^= QC32up(0x70, r);
		a[0xF] ^= QC32dn(0x70, r);
		RSTT(0x0, 0x1, a, 0x2, 0x6, 0xA, 0xE, 0x1, 0x5, 0x9, 0xD);
		RSTT(0x2, 0x3, a, 0x4, 0x8, 0xC, 0x0, 0x3, 0x7, 0xB, 0xF);
		RSTT(0x4, 0x5, a, 0x6, 0xA, 0xE, 0x2, 0x5, 0x9, 0xD, 0x1);
		RSTT(0x6, 0x7, a, 0x8, 0xC, 0x0, 0x4, 0x7, 0xB, 0xF, 0x3);
		RSTT(0x8, 0x9, a, 0xA, 0xE, 0x2, 0x6, 0x9, 0xD, 0x1, 0x5);
		RSTT(0xA, 0xB, a, 0xC, 0x0, 0x4, 0x8, 0xB, 0xF, 0x3, 0x7);
		RSTT(0xC, 0xD, a, 0xE, 0x2, 0x6, 0xA, 0xD, 0x1, 0x5, 0x9);
		RSTT(0xE, 0xF, a, 0x0, 0x4, 0x8, 0xC, 0xF, 0x3, 0x7, 0xB);

		#pragma unroll
		for (int k = 0; k<16; k++)
			a[k] = t[k];
	}
}

__global__ __launch_bounds__(TPB,2)
void groestl256_gpu_hash_32(uint32_t threads, uint32_t startNounce, uint2 *d_Hash, uint32_t *resNonces)
{
	__shared__ uint32_t mixtabs[8][256];

	mixtabs[0][threadIdx.x] = __ldg(&T0up[threadIdx.x]);
	mixtabs[1][threadIdx.x] = __ldg(&T0dn[threadIdx.x]);
	mixtabs[2][threadIdx.x] = __ldg(&T1up[threadIdx.x]);
	mixtabs[3][threadIdx.x] = __ldg(&T1dn[threadIdx.x]);
	mixtabs[4][threadIdx.x] = __ldg(&T2up[threadIdx.x]);
	mixtabs[5][threadIdx.x] = __ldg(&T2dn[threadIdx.x]);
	mixtabs[6][threadIdx.x] = __ldg(&T3up[threadIdx.x]);
	mixtabs[7][threadIdx.x] = __ldg(&T3dn[threadIdx.x]);

	const uint32_t thread = (blockDim.x * blockIdx.x + threadIdx.x);
	const uint32_t nonce  = startNounce + thread;
	uint32_t t[16];

	// GROESTL
	uint32_t message[16] = { 0 };
	uint32_t state[16];

	#pragma unroll
	for (int k = 0; k<4; k++)
		*(uint2*)&message[2*k]=__ldg(&d_Hash[k*threads+thread]);

	__syncthreads();

	message[8] = 0x80;
	message[15] = 0x01000000;

	#pragma unroll 16
	for (int u = 0; u<16; u++)
		state[u] = message[u];

	state[15] ^= 0x10000;

		// Perm
//	groestl256_perm_P(thread, state, mixtabs);
	for (int r = 0; r<10; r++){
		state[0x0] ^= PC32up(0x00, r);
		state[0x2] ^= PC32up(0x10, r);
		state[0x4] ^= PC32up(0x20, r);
		state[0x6] ^= PC32up(0x30, r);
		state[0x8] ^= PC32up(0x40, r);
		state[0xA] ^= PC32up(0x50, r);
		state[0xC] ^= PC32up(0x60, r);
		state[0xE] ^= PC32up(0x70, r);
		RSTT(0x0, 0x1, state, 0x0, 0x2, 0x4, 0x6, 0x9, 0xB, 0xD, 0xF);
		RSTT(0x2, 0x3, state, 0x2, 0x4, 0x6, 0x8, 0xB, 0xD, 0xF, 0x1);
		RSTT(0x4, 0x5, state, 0x4, 0x6, 0x8, 0xA, 0xD, 0xF, 0x1, 0x3);
		RSTT(0x6, 0x7, state, 0x6, 0x8, 0xA, 0xC, 0xF, 0x1, 0x3, 0x5);
		RSTT(0x8, 0x9, state, 0x8, 0xA, 0xC, 0xE, 0x1, 0x3, 0x5, 0x7);
		RSTT(0xA, 0xB, state, 0xA, 0xC, 0xE, 0x0, 0x3, 0x5, 0x7, 0x9);
		RSTT(0xC, 0xD, state, 0xC, 0xE, 0x0, 0x2, 0x5, 0x7, 0x9, 0xB);
		RSTT(0xE, 0xF, state, 0xE, 0x0, 0x2, 0x4, 0x7, 0x9, 0xB, 0xD);

		#pragma unroll 16
		for (int k = 0; k<16; k++)
			state[k] = t[k];
	}

	state[15] ^= 0x10000;

	groestl256_perm_Q(thread, message, mixtabs);

	#pragma unroll 16
	for (int u = 0; u<16; u++) state[u] ^= message[u];

//		#pragma unroll 16
//		for (int u = 0; u<16; u++) message[u] = state[u];
	uint32_t state15 = state[15];

//	groestl256_perm_P(thread, state, mixtabs);
	for (int r = 0; r<10; r++){
		state[0x0] ^= PC32up(0x00, r);
		state[0x2] ^= PC32up(0x10, r);
		state[0x4] ^= PC32up(0x20, r);
		state[0x6] ^= PC32up(0x30, r);
		state[0x8] ^= PC32up(0x40, r);
		state[0xA] ^= PC32up(0x50, r);
		state[0xC] ^= PC32up(0x60, r);
		state[0xE] ^= PC32up(0x70, r);
		RSTT(0x0, 0x1, state, 0x0, 0x2, 0x4, 0x6, 0x9, 0xB, 0xD, 0xF);
		RSTT(0x2, 0x3, state, 0x2, 0x4, 0x6, 0x8, 0xB, 0xD, 0xF, 0x1);
		RSTT(0x4, 0x5, state, 0x4, 0x6, 0x8, 0xA, 0xD, 0xF, 0x1, 0x3);
		RSTT(0x6, 0x7, state, 0x6, 0x8, 0xA, 0xC, 0xF, 0x1, 0x3, 0x5);
		RSTT(0x8, 0x9, state, 0x8, 0xA, 0xC, 0xE, 0x1, 0x3, 0x5, 0x7);
		RSTT(0xA, 0xB, state, 0xA, 0xC, 0xE, 0x0, 0x3, 0x5, 0x7, 0x9);
		RSTT(0xC, 0xD, state, 0xC, 0xE, 0x0, 0x2, 0x5, 0x7, 0x9, 0xB);
		RSTT(0xE, 0xF, state, 0xE, 0x0, 0x2, 0x4, 0x7, 0x9, 0xB, 0xD);
	
		#pragma unroll 16
		for (int k = 0; k<16; k++)
			state[k] = t[k];
	}
		
	if ((state15^state[15]) <= pTarget[7]) {
		uint32_t tmp = atomicExch(&resNonces[0], nonce);
		if (tmp != UINT32_MAX)
			resNonces[1] = tmp;
	}
}

__host__
void groestl256_cpu_init(int thr_id, uint32_t threads)
{
	cudaMalloc(&d_GNonces[thr_id], 2*sizeof(uint32_t));
	cudaMallocHost(&h_GNonces[thr_id], 2*sizeof(uint32_t));
}

__host__
void groestl256_cpu_free(int thr_id)
{
	cudaFree(d_GNonces[thr_id]);
	cudaFreeHost(h_GNonces[thr_id]);
}

__host__
void groestl256_cpu_hash_32(int thr_id, uint32_t threads, uint32_t startNounce, uint2 *d_Hash, uint32_t *resultnonces)
{
	// berechne wie viele Thread Blocks wir brauchen
	dim3 grid((threads + TPB-1)/TPB);
	dim3 block(TPB);

	size_t shared_size = 8 * 256 * sizeof(uint32_t);

	groestl256_gpu_hash_32<<<grid, block, shared_size>>>(threads, startNounce, d_Hash, d_GNonces[thr_id]);

//	cudaThreadSynchronize();

	cudaMemcpy(resultnonces, d_GNonces[thr_id], 2*sizeof(uint32_t), cudaMemcpyDeviceToHost);
}

__host__
void groestl256_set_output(int thr_id)
{
	cudaMemset(d_GNonces[thr_id], 0xff, 2*sizeof(uint32_t));
}

__host__
void groestl256_setTarget(const void *pTargetIn)
{
	cudaMemcpyToSymbol(pTarget, pTargetIn, 32, 0, cudaMemcpyHostToDevice);
}
